{"version":3,"sources":["Context.js","components/ScreenCalculator.js","components/KeyboardKey.js","components/Keyboard.js","components/MainCalculator.js","App.js","serviceWorker.js","index.js"],"names":["ContextCalculator","React","createContext","ContextProvider","props","useState","partialNumber","setParcialNumber","Provider","value","addNumberToParcial","newNumber","prevParcialNumber","children","ScreenCalculator","useContext","className","style","padding","backgroundColor","color","KeyboadKey","handleDrag","event","preventDefault","draggable","onDrag","onDragStart","onClick","valueKey","tallKey","Keyboard","display","height","width","justifyContent","MainCalculator","minWidth","minHeight","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gSAEMA,EAAoBC,IAAMC,gBAEhC,SAASC,EAAgBC,GAAQ,IAAD,EACYC,mBAAS,IADrB,mBACvBC,EADuB,KACRC,EADQ,KAS9B,OACE,kBAACP,EAAkBQ,SAAnB,CAA4BC,MAAO,CAAEH,gBAAeI,mBAPtD,SAA4BC,GAC1BJ,GAAiB,SAACK,GAChB,MAAO,GAAKA,EAAoBD,QAM/BP,EAAMS,UCZE,SAASC,IAAoB,IAClCR,EAAkBS,qBAAWf,GAA7BM,cAER,OACE,yBAAKU,UAAU,yBACb,wBACEC,MAAO,CAAEC,QAAS,OAAQC,gBAAiB,UAAWC,MAAO,UAD/D,mBAKA,wBACEH,MAAO,CAAEC,QAAS,OAAQC,gBAAiB,UAAWC,MAAO,UAE5Dd,ICbM,SAASe,EAAWjB,GAAQ,IACjCM,EAAuBK,qBAAWf,GAAlCU,mBAEFY,EAAa,SAACC,GAClBA,EAAMC,kBAOR,OACE,yBACEC,WAAS,EACTC,OAAQJ,EACRK,YAAaL,EACbM,QATgB,SAACL,GACnBb,EAAmBN,EAAMyB,WASvBb,UACEZ,EAAM0B,QACF,mDACA,uDAGN,6BAAM1B,EAAMyB,WCvBH,SAASE,IACtB,OACE,yBACEd,MAAO,CACLe,QAAS,OACTC,OAAQ,OACRC,MAAO,OACPC,eAAgB,WAGlB,yBAAKnB,UAAU,yBACb,kBAACK,EAAD,CAAYQ,SAAS,MACrB,kBAACR,EAAD,CAAYQ,SAAS,MACrB,kBAACR,EAAD,CAAYQ,SAAS,OAEvB,yBAAKb,UAAU,yBACb,kBAACK,EAAD,CAAYQ,SAAS,MACrB,kBAACR,EAAD,CAAYQ,SAAS,MACrB,kBAACR,EAAD,CAAYQ,SAAS,OAEvB,yBAAKb,UAAU,yBACb,kBAACK,EAAD,CAAYQ,SAAS,MACrB,kBAACR,EAAD,CAAYQ,SAAS,MACrB,kBAACR,EAAD,CAAYQ,SAAS,OAGvB,yBAAKb,UAAU,yBACb,kBAACK,EAAD,CAAYQ,SAAS,MACrB,kBAACR,EAAD,CAAYQ,SAAS,IAAIC,SAAS,MC1B3B,SAASM,IACtB,OACE,kBAACjC,EAAD,KACE,yBACEa,UAAU,wBACVC,MAAO,CACLoB,SAAU,QACVC,UAAW,UAGb,kBAACxB,EAAD,MACA,kBAACiB,EAAD,QCPOQ,MAJf,WACE,OAAO,kBAACH,EAAD,OCMWI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9e440c6d.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nconst ContextCalculator = React.createContext();\r\n\r\nfunction ContextProvider(props) {\r\n  const [partialNumber, setParcialNumber] = useState(\"\");\r\n\r\n  function addNumberToParcial(newNumber) {\r\n    setParcialNumber((prevParcialNumber) => {\r\n      return \"\" + prevParcialNumber + newNumber;\r\n    });\r\n  }\r\n\r\n  return (\r\n    <ContextCalculator.Provider value={{ partialNumber, addNumberToParcial }}>\r\n      {props.children}\r\n    </ContextCalculator.Provider>\r\n  );\r\n}\r\n\r\nexport { ContextProvider, ContextCalculator };\r\n","import React, { useContext } from \"react\";\r\nimport { ContextCalculator } from \"../Context\";\r\n\r\nexport default function ScreenCalculator() {\r\n  const { partialNumber } = useContext(ContextCalculator);\r\n\r\n  return (\r\n    <div className=\"display-column-center\">\r\n      <h1\r\n        style={{ padding: \"40px\", backgroundColor: \"#3b6978\", color: \"white\" }}\r\n      >\r\n        Resultado Final\r\n      </h1>\r\n      <h3\r\n        style={{ padding: \"20px\", backgroundColor: \"#84a9ac\", color: \"white\" }}\r\n      >\r\n        {partialNumber}\r\n      </h3>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useContext } from \"react\";\r\nimport { ContextCalculator } from \"../Context\";\r\n\r\nexport default function KeyboadKey(props) {\r\n  const { addNumberToParcial } = useContext(ContextCalculator);\r\n\r\n  const handleDrag = (event) => {\r\n    event.preventDefault();\r\n  };\r\n\r\n  const handleClick = (event) => {\r\n    addNumberToParcial(props.valueKey);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      draggable\r\n      onDrag={handleDrag}\r\n      onDragStart={handleDrag}\r\n      onClick={handleClick}\r\n      className={\r\n        props.tallKey\r\n          ? \"keyboard-key tall-size-key display-column-center\"\r\n          : \"keyboard-key regular-size-key display-column-center\"\r\n      }\r\n    >\r\n      <div>{props.valueKey}</div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport KeyboadKey from \"./KeyboardKey\";\r\n\r\nexport default function Keyboard() {\r\n  return (\r\n    <div\r\n      style={{\r\n        display: \"flex\",\r\n        height: \"60vh\",\r\n        width: \"100%\",\r\n        justifyContent: \"center\",\r\n      }}\r\n    >\r\n      <div className=\"items-column-keyboard\">\r\n        <KeyboadKey valueKey=\"1\" />\r\n        <KeyboadKey valueKey=\"4\" />\r\n        <KeyboadKey valueKey=\"7\" />\r\n      </div>\r\n      <div className=\"items-column-keyboard\">\r\n        <KeyboadKey valueKey=\"4\" />\r\n        <KeyboadKey valueKey=\"5\" />\r\n        <KeyboadKey valueKey=\"6\" />\r\n      </div>\r\n      <div className=\"items-column-keyboard\">\r\n        <KeyboadKey valueKey=\"3\" />\r\n        <KeyboadKey valueKey=\"6\" />\r\n        <KeyboadKey valueKey=\"9\" />\r\n      </div>\r\n\r\n      <div className=\"items-column-keyboard\">\r\n        <KeyboadKey valueKey=\"<\" />\r\n        <KeyboadKey valueKey=\"0\" tallKey={true} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport ScreenCalculator from \"./ScreenCalculator\";\r\nimport Keyboard from \"./Keyboard\";\r\nimport { ContextProvider } from \"../Context\";\r\n\r\nexport default function MainCalculator() {\r\n  return (\r\n    <ContextProvider>\r\n      <div\r\n        className=\"display-column-center\"\r\n        style={{\r\n          minWidth: \"100vw\",\r\n          minHeight: \"100vh\",\r\n        }}\r\n      >\r\n        <ScreenCalculator />\r\n        <Keyboard />\r\n      </div>\r\n    </ContextProvider>\r\n  );\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\nimport \"./components/components-style.css\";\nimport MainCalculator from \"./components/MainCalculator\";\n\nfunction App() {\n  return <MainCalculator />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}